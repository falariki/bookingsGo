var tc = make(map[string]*template.Template)

func RenderTempletes(w http.ResponseWriter, t string) {
	var tmpl *template.Template
	var err error

	//check to see if we already have the template in our cache
	//looking for the key t (we going to pass in) in the map tc
	_, inMap := tc[t]
	if !inMap {
		//need to create the templete
		log.Println("creating template and adding to cache")
		err = createTemplateCache(t)
		if err != nil {
			log.Println(err)
		}
	} else {
		//we have a template in the cache
		log.Println("using cached tamplate")
	}

	tmpl = tc[t]

	err = tmpl.Execute(w, nil)
	if err != nil {
		log.Println(err)
	}

}

func createTemplateCache(t string) error {
	templates := []string{
		fmt.Sprintf("./templates/%s", t),
		"./templates/base.layout.html",
	}

	fmt.Println(templates)

	// parse the template
	tmpl, err := template.ParseFiles(templates...)
	if err != nil {
		return err
	}

	// add template to cache (map)
	tc[t] = tmpl

	return nil
}

//first version
// RenderTempletes renders templates using html/template
func RenderTempletes(w http.ResponseWriter, html string) {
	//parse the templete
	parsedTemplete, _ := template.ParseFiles("./templates/"+html, "./templates/base.layout.html")
	err := parsedTemplete.Execute(w, nil)
	//nil - no data

	if err != nil {
		fmt.Println("Error parsing template:", err)
		return
	}
}


Two ways of creating a map 

myCache := map[string]*template.Template{}
same as 
var myCache = make(map[string]*template.Template)